// Defines the protobuf messsages and services used by the yt_box backend and
// clients to the backend.
//
// Usage:
// cd to project root
// protoc --go_out=plugins=grpc:. github.com/nguyenmq/ytbox-go/proto/backend/*.proto

syntax = "proto3";

package backend_pb;
option go_package = "github.com/nguyenmq/ytbox-go/internal/proto/backend";

import "internal/proto/common/common.proto";

service YtbBackend {
    // Submit a song to the backend service to be added to the play queue
    rpc SendSong(Submission) returns (Error) {}

    // Remove a song from the playlist
    rpc RemoveSong(Eviction) returns (Error) {}

    // Get the "now playing" song
    rpc GetNowPlaying(common_pb.Empty) returns (common_pb.Song) {}

    // Get the songs in the queue
    rpc GetPlaylist(common_pb.Empty) returns (Playlist) {}

    // Save the playlist to the given file
    rpc SavePlaylist(FilePath) returns (Error) {}

    // Pop a song off the head of the queue
    rpc PopQueue(common_pb.Empty) returns (common_pb.Song) {}

    // Login the given user. If a user with the given id doesn't exist, then a
    // new one with the given name will be created. A successful call will
    // return the user with an id greater than 0.
    rpc LoginUser(User) returns (User) {}

    // Skip to the next song in the playlist
    rpc NextSong(common_pb.Empty) returns (Error) {}

    // Pause the currently playing song
    rpc PauseSong(common_pb.Empty) returns (Error) {}

    // Create a new room
    rpc CreateRoom(Room) returns (Room) {}

    // Gets room by name
    rpc GetRoom(Room) returns (Room) {}
}

// Contains error number and message
message Error {
    // success flag
    bool success = 1;

    // error message body
    string message = 2;
}

// Data needed to submit a song to the backend service
message Submission {
    // Service link to the song (YouTube, Spotify, etc)
    string link = 1;

    // Id of the user who submitted the link
    uint32 userId = 2;
}

// Playlist message
message Playlist {
    repeated common_pb.Song songs = 1;
}

// Contains a file path
message FilePath {
    string path = 1;
}

// Login the user with the given name and id
message User {
    // the user's name
    string username = 1;

    // the user's id
    uint32 userId = 2;

    // the room id that the user belongs to
    uint32 roomId = 3;

    // error status
    Error err = 4;
}

// A song eviction
message Eviction {
    // id of song to evict
    uint32 songId = 1;

    // id of the user who submitted the song
    uint32 userId = 2;
}

// A room contains an isolated song queue for users to submit songs to
message Room {
    // name of the room
    string name = 1;

    // id of the room
    uint32 id = 2;

    // error status
    Error err = 3;
}
